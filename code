
import pandas as pd
df = pd.read_csv('train.csv')


df.drop(['id','bdate', 'has_photo', 'has_mobile', 'followers_count', 'graduation', 'last_seen', 'career_start', 'career_end', 'city', 'occuon']):
df['education_from'].fillna('Full-time', inplace = True)
df[list(pd.get_dummies(df['education_form']).colunns)] = pd.get_dummies(df['education_form'])
df.drop(['education_form'], axis = 1, inplase = True)
def edu_status_apply(edu_status):
    if edu_status == 'Undergraduate applicant':
        return 0
    elif edu_status == 'Student (Specialist)' or edu_status == "Student (Bachelor's)" or edu_status == "Student (Master's)":
        return 1
    elif edu_status == 'Alumnus (Master's)' or edu_status == "Alumnus (Specialist)" or edu_status == "alumnus (Bachelor's)":
        return 2
    elif edu_status == "phD" or edu_status == 'Candidate of Sciences':
        return 3

df['aducation_status'] = df['education_status'].apply(edu_status_apply)


def split_langs(langs):
    return lang.split(';')
df['langs'] = df['langs'].apply(split_langs)
df['langs'] = df['langs'].apply(len)
print(df['langs'].value_counts())
df.info()


from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_metrics import confusion_matrix, accuracy_score

x = df.drop('result', axis = 1)
y = df['result']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25) 

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

classifier = KNeighborsClassifier(n_neighbors = 5)
classifier.fit(X_train, X_test)

y_pred = classifier.predict(X_test)
print('Процент правильно предсказанных исходов', round(accuracy_score(y_test, y_pred) * 100, 2))
print ('Confusion matrix:')
print('confusion_matrix(y_test, y_pred'))

